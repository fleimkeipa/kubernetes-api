// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/github_callback": {
            "get": {
                "description": "This endpoint handles the callback from Github after a user authorizes the app. It exchanges the authorization code for an access token and retrieves the users profile information.",
                "tags": [
                    "oAuth"
                ],
                "summary": "Github OAuth2 callback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "State for CSRF protection",
                        "name": "state",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization code returned by Github",
                        "name": "code",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User's Github profile data",
                        "schema": {
                            "$ref": "#/definitions/controller.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Error message",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/auth/github_login": {
            "get": {
                "description": "This endpoint initiates the Github OAuth2 login process by redirecting the user to Githubs login page.",
                "tags": [
                    "oAuth"
                ],
                "summary": "Redirect to Github login page",
                "responses": {
                    "303": {
                        "description": "Redirects to Github login page",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Error message",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/auth/google_callback": {
            "get": {
                "description": "This endpoint handles the callback from Google after a user authorizes the app. It exchanges the authorization code for an access token and retrieves the users profile information.",
                "tags": [
                    "oAuth"
                ],
                "summary": "Google OAuth2 callback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "State for CSRF protection",
                        "name": "state",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization code returned by Google",
                        "name": "code",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User's Google profile data",
                        "schema": {
                            "$ref": "#/definitions/controller.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Error message",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/auth/google_login": {
            "get": {
                "description": "This endpoint initiates the Google OAuth2 login process by redirecting the user to Googles login page.",
                "tags": [
                    "oAuth"
                ],
                "summary": "Redirect to Google login page",
                "responses": {
                    "303": {
                        "description": "Redirects to Google login page",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Error message",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "This endpoint allows a user to log in by providing a valid username and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User login input",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged in with JWT token",
                        "schema": {
                            "$ref": "#/definitions/controller.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Error message including details on failure",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/deployments": {
            "get": {
                "description": "Retrieves a list of deployments from the Kubernetes cluster, optionally filtered by namespace.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deployments"
                ],
                "summary": "List deployments",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of deployments to retrieve",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pagination token for fetching more deployments",
                        "name": "continue",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace to filter deployments by",
                        "name": "namespace",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of deployments",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing deployment in the Kubernetes cluster.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deployments"
                ],
                "summary": "Update an existing deployment",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Deployment request body",
                        "name": "deployment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DeploymentUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the deployment",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request or invalid data",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new deployment in the Kubernetes cluster.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deployments"
                ],
                "summary": "Create a new deployment",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Deployment request body",
                        "name": "deployment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DeploymentCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Suxccessfully created deployment",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request or error message",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/deployments/{id}": {
            "get": {
                "description": "Retrieves a deployment from the Kubernetes cluster by its name or UID, optionally filtered by namespace.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deployments"
                ],
                "summary": "Get a deployment by name or UID",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Namespace to filter the deployment by",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Name or UID of the deployment",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the requested deployment",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a deployment from the Kubernetes cluster by its name or UID, optionally filtered by namespace.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deployments"
                ],
                "summary": "Delete a deployment by name or UID",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Namespace to filter the deployment by",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Name or UID of the deployment",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad request or error message",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "description": "Retrieves a list of events from the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "List events",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "kind to filter events by",
                        "name": "kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "event kind to filter events by",
                        "name": "event_kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "creation time to filter events by",
                        "name": "creation_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "owner id to filter events by",
                        "name": "owner_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "owner username to filter events by",
                        "name": "owner_username",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of events",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/events/{id}": {
            "get": {
                "description": "Retrieves a event from Database by its ID, optionally filtered by namespace.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get a event by ID",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of the event",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the requested event",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/namespaces": {
            "get": {
                "description": "Retrieves a list of namespaces from the Kubernetes cluster.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespaces"
                ],
                "summary": "List namespaces",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of namespaces to retrieve",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pagination token for fetching more namespaces",
                        "name": "continue",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of namespaces",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Bad request or error message",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing namespace in the Kubernetes cluster.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespaces"
                ],
                "summary": "Update an existing namespace",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Namespace request body",
                        "name": "namespace",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.NamespaceUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the namespace",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request or invalid data",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new namespace in the Kubernetes cluster.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespaces"
                ],
                "summary": "Create a new namespace",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Namespace request body",
                        "name": "namespace",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.NamespaceCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created namespace",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request or error message",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/namespaces/{id}": {
            "get": {
                "description": "Retrieves a namespace from the Kubernetes cluster by its name or UID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespaces"
                ],
                "summary": "Get a namespace by name or UID",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name or UID of the namespace",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the requested namespace",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a namespace from the Kubernetes cluster by its name or UID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespaces"
                ],
                "summary": "Delete a namespace by name or UID",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name or UID of the namespace",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/pods": {
            "get": {
                "description": "Retrieves a list of pods from the Kubernetes cluster. You can filter results by namespace or paginate the response using the limit and continue parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pods"
                ],
                "summary": "List pods",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of pods to retrieve",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pagination token for fetching more pods",
                        "name": "continue",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace to filter pods by",
                        "name": "namespace",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of pods",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new pod in the Kubernetes cluster.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pods"
                ],
                "summary": "Create a new pod",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Pod request body",
                        "name": "pod",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PodsCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created the pod",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request or invalid data",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/pods/{id}": {
            "get": {
                "description": "Retrieves a pod from the Kubernetes cluster by its name or UID, optionally filtered by namespace.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pods"
                ],
                "summary": "Get a pod by name or UID",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Namespace to filter the pod by",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Name or UID of the pod",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the requested pod",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update specific fields of an existing pod in the Kubernetes cluster. The following fields are changeable:\n- containers.image\n- initContainers.image\n- tolerations (only additions)\n- activeDeadlineSeconds\n- terminationGracePeriodSeconds",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pods"
                ],
                "summary": "Update an existing pod",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Pod update request body",
                        "name": "pod",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PodsUpdateRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Namespace to filter the pod by",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Name or UID of the pod",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pod successfully updated",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request or invalid input data",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a pod from the Kubernetes cluster by its name or UID, optionally filtered by namespace.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pods"
                ],
                "summary": "Delete a pod by name or UID",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Namespace to filter the pod by",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Name or UID of the pod",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Retrieves a filtered and paginated list of users from the database based on query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "List all users",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Limit the number of users returned",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Number of users to skip for pagination",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter users by username",
                        "name": "username",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter users by email",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter users by role ID",
                        "name": "role_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response containing the list of users",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "This endpoint creates a new user by providing username, email, password, and role ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "CreateUser creates a new user",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User creation input",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "user username",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Error message including details on failure",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Fetches a user by their unique ID from the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieve user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response containing the user information",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "This endpoint updates a user by providing username, email, password, and role ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "UpdateUser updates an existing user",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User update input",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user username",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Error message including details on failure",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "This endpoint deletes a user by providing user id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "DeleteUser deletes an existing user",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user username",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.AuthResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "example": "basic,oauth2"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "controller.FailureResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "controller.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "model.Container": {
            "type": "object",
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "env": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.EnvVar"
                    }
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ContainerPort"
                    }
                },
                "stdin": {
                    "type": "boolean"
                },
                "stdinOnce": {
                    "type": "boolean"
                },
                "terminationMessagePath": {
                    "type": "string"
                },
                "tty": {
                    "type": "boolean"
                },
                "workingDir": {
                    "type": "string"
                }
            }
        },
        "model.ContainerPort": {
            "type": "object",
            "properties": {
                "containerPort": {
                    "type": "integer"
                },
                "hostIP": {
                    "type": "string"
                },
                "hostPort": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                }
            }
        },
        "model.ContainerRequest": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "string"
                },
                "name": {
                    "description": "cannot changable",
                    "type": "string"
                }
            }
        },
        "model.CreateOptions": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "dryRun": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "fieldManager": {
                    "type": "string"
                },
                "fieldValidation": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                }
            }
        },
        "model.Deployment": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "Specification of the desired behavior of the Deployment.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.DeploymentSpec"
                        }
                    ]
                },
                "status": {
                    "description": "Most recently observed status of the Deployment.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.DeploymentStatus"
                        }
                    ]
                }
            }
        },
        "model.DeploymentCondition": {
            "type": "object",
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "type": "string"
                },
                "lastUpdateTime": {
                    "description": "The last time this condition was updated.",
                    "type": "string"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string"
                },
                "type": {
                    "description": "Type of deployment condition.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.DeploymentConditionType"
                        }
                    ]
                }
            }
        },
        "model.DeploymentConditionType": {
            "type": "string",
            "enum": [
                "Available",
                "Progressing",
                "ReplicaFailure"
            ],
            "x-enum-varnames": [
                "DeploymentAvailable",
                "DeploymentProgressing",
                "DeploymentReplicaFailure"
            ]
        },
        "model.DeploymentCreateRequest": {
            "type": "object",
            "properties": {
                "deployment": {
                    "$ref": "#/definitions/model.Deployment"
                },
                "opts": {
                    "$ref": "#/definitions/model.CreateOptions"
                }
            }
        },
        "model.DeploymentObjectMetaUpdateRequest": {
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "model.DeploymentSpec": {
            "type": "object",
            "properties": {
                "minReadySeconds": {
                    "description": "Minimum number of seconds for which a newly created pod should be ready\nwithout any of its container crashing, for it to be considered available.\nDefaults to 0 (pod will be considered available as soon as it is ready)\n+optional",
                    "type": "integer"
                },
                "paused": {
                    "description": "Indicates that the deployment is paused.\n+optional",
                    "type": "boolean"
                },
                "progressDeadlineSeconds": {
                    "description": "The maximum time in seconds for a deployment to make progress before it\nis considered to be failed. The deployment controller will continue to\nprocess failed deployments and a condition with a ProgressDeadlineExceeded\nreason will be surfaced in the deployment status. Note that progress will\nnot be estimated during the time a deployment is paused. Defaults to 600s.",
                    "type": "integer"
                },
                "replicas": {
                    "description": "Number of desired pods. This is a pointer to distinguish between explicit\nzero and not specified. Defaults to 1.\n+optional",
                    "type": "integer"
                },
                "revisionHistoryLimit": {
                    "description": "The number of old ReplicaSets to retain to allow rollback.\nThis is a pointer to distinguish between explicit zero and not specified.\nDefaults to 10.\n+optional",
                    "type": "integer"
                },
                "selector": {
                    "description": "Label selector for pods. Existing ReplicaSets whose pods are\nselected by this will be the ones affected by this deployment.\nIt must match the pod template's labels.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.LabelSelector"
                        }
                    ]
                },
                "strategy": {
                    "description": "The deployment strategy to use to replace existing pods with new ones.\n+optional\ns",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.DeploymentStrategy"
                        }
                    ]
                },
                "template": {
                    "description": "Template describes the pods that will be created.\nThe only allowed template.spec.restartPolicy value is \"Always\".",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.PodTemplateSpec"
                        }
                    ]
                }
            }
        },
        "model.DeploymentSpecUpdateRequest": {
            "type": "object",
            "properties": {
                "minReadySeconds": {
                    "type": "integer"
                },
                "progressDeadlineSeconds": {
                    "type": "integer"
                },
                "replicas": {
                    "type": "integer"
                },
                "strategy": {
                    "$ref": "#/definitions/model.DeploymentStrategy"
                },
                "template": {
                    "$ref": "#/definitions/model.PodTemplateSpec"
                }
            }
        },
        "model.DeploymentStatus": {
            "type": "object",
            "properties": {
                "availableReplicas": {
                    "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.\n+optional",
                    "type": "integer"
                },
                "collisionCount": {
                    "description": "Count of hash collisions for the Deployment. The Deployment controller uses this\nfield as a collision avoidance mechanism when it needs to create the name for the\nnewest ReplicaSet.\n+optional",
                    "type": "integer"
                },
                "conditions": {
                    "description": "Represents the latest available observations of a deployment's current state.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.DeploymentCondition"
                    }
                },
                "observedGeneration": {
                    "description": "The generation observed by the deployment controller.\n+optional",
                    "type": "integer"
                },
                "readyReplicas": {
                    "description": "readyReplicas is the number of pods targeted by this Deployment with a Ready Condition.\n+optional",
                    "type": "integer"
                },
                "replicas": {
                    "description": "Total number of non-terminated pods targeted by this deployment (their labels match the selector).\n+optional",
                    "type": "integer"
                },
                "unavailableReplicas": {
                    "description": "Total number of unavailable pods targeted by this deployment. This is the total number of\npods that are still required for the deployment to have 100% available capacity. They may\neither be pods that are running but not yet available or pods that still have not been created.\n+optional",
                    "type": "integer"
                },
                "updatedReplicas": {
                    "description": "Total number of non-terminated pods targeted by this deployment that have the desired template spec.\n+optional",
                    "type": "integer"
                }
            }
        },
        "model.DeploymentStrategy": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Rolling update config params. Present only if DeploymentStrategyType =\nRollingUpdate.\n---\nTODO: Update this to follow our convention for oneOf, whatever we decide it\nto be.\n+optional\nRollingUpdate *RollingUpdateDeployment ` + "`" + `json:\"rollingUpdate,omitempty\"` + "`" + `\nType of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.DeploymentStrategyType"
                        }
                    ]
                }
            }
        },
        "model.DeploymentStrategyType": {
            "type": "string",
            "enum": [
                "Recreate",
                "RollingUpdate"
            ],
            "x-enum-varnames": [
                "RecreateDeploymentStrategyType",
                "RollingUpdateDeploymentStrategyType"
            ]
        },
        "model.DeploymentUpdate": {
            "type": "object",
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/model.DeploymentObjectMetaUpdateRequest"
                },
                "spec": {
                    "$ref": "#/definitions/model.DeploymentSpecUpdateRequest"
                }
            }
        },
        "model.DeploymentUpdateRequest": {
            "type": "object",
            "properties": {
                "deployment": {
                    "$ref": "#/definitions/model.DeploymentUpdate"
                },
                "opts": {
                    "$ref": "#/definitions/model.UpdateOptions"
                }
            }
        },
        "model.EnvVar": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "model.FinalizerName": {
            "type": "string",
            "enum": [
                "kubernetes"
            ],
            "x-enum-varnames": [
                "FinalizerKubernetes"
            ]
        },
        "model.LabelSelector": {
            "type": "object",
            "properties": {
                "matchExpressions": {
                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.LabelSelectorRequirement"
                    }
                },
                "matchLabels": {
                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "model.LabelSelectorOperator": {
            "type": "string",
            "enum": [
                "In",
                "NotIn",
                "Exists",
                "DoesNotExist"
            ],
            "x-enum-varnames": [
                "LabelSelectorOpIn",
                "LabelSelectorOpNotIn",
                "LabelSelectorOpExists",
                "LabelSelectorOpDoesNotExist"
            ]
        },
        "model.LabelSelectorRequirement": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                },
                "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.LabelSelectorOperator"
                        }
                    ]
                },
                "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.Login": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.Namespace": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/model.ObjectMeta"
                },
                "spec": {
                    "description": "Spec defines the behavior of the Namespace.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.NamespaceSpec"
                        }
                    ]
                },
                "status": {
                    "description": "Status describes the current status of a Namespace.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.NamespaceStatus"
                        }
                    ]
                }
            }
        },
        "model.NamespaceCondition": {
            "type": "object",
            "properties": {
                "lastTransitionTime": {
                    "description": "+optional",
                    "type": "string"
                },
                "message": {
                    "description": "+optional",
                    "type": "string"
                },
                "reason": {
                    "description": "+optional",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string"
                },
                "type": {
                    "description": "Type of namespace controller condition.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.NamespaceConditionType"
                        }
                    ]
                }
            }
        },
        "model.NamespaceConditionType": {
            "type": "string",
            "enum": [
                "NamespaceDeletionDiscoveryFailure",
                "NamespaceDeletionContentFailure",
                "NamespaceDeletionGroupVersionParsingFailure",
                "NamespaceContentRemaining",
                "NamespaceFinalizersRemaining"
            ],
            "x-enum-varnames": [
                "NamespaceDeletionDiscoveryFailure",
                "NamespaceDeletionContentFailure",
                "NamespaceDeletionGVParsingFailure",
                "NamespaceContentRemaining",
                "NamespaceFinalizersRemaining"
            ]
        },
        "model.NamespaceCreateRequest": {
            "type": "object",
            "properties": {
                "namespace": {
                    "$ref": "#/definitions/model.Namespace"
                },
                "opts": {
                    "$ref": "#/definitions/model.CreateOptions"
                }
            }
        },
        "model.NamespaceObjectMetaUpdateRequest": {
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "model.NamespacePhase": {
            "type": "string",
            "enum": [
                "Active",
                "Terminating"
            ],
            "x-enum-varnames": [
                "NamespaceActive",
                "NamespaceTerminating"
            ]
        },
        "model.NamespaceSpec": {
            "type": "object",
            "properties": {
                "finalizers": {
                    "description": "Finalizers is an opaque list of values that must be empty to permanently remove object from storage.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.FinalizerName"
                    }
                }
            }
        },
        "model.NamespaceStatus": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Represents the latest available observations of a namespace's current state.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.NamespaceCondition"
                    }
                },
                "phase": {
                    "description": "Phase is the current lifecycle phase of the namespace.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.NamespacePhase"
                        }
                    ]
                }
            }
        },
        "model.NamespaceUpdate": {
            "type": "object",
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/model.NamespaceObjectMetaUpdateRequest"
                },
                "spec": {
                    "$ref": "#/definitions/model.NamespaceSpec"
                }
            }
        },
        "model.NamespaceUpdateRequest": {
            "type": "object",
            "properties": {
                "namespace": {
                    "$ref": "#/definitions/model.NamespaceUpdate"
                },
                "opts": {
                    "$ref": "#/definitions/model.UpdateOptions"
                }
            }
        },
        "model.ObjectMeta": {
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "creationTimestamp": {
                    "type": "string"
                },
                "deletionGracePeriodSeconds": {
                    "type": "integer"
                },
                "deletionTimestamp": {
                    "type": "string"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "generateName": {
                    "type": "string"
                },
                "generation": {
                    "type": "integer"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "ownerReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.OwnerReference"
                    }
                },
                "resourceVersion": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "model.OwnerReference": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "blockOwnerDeletion": {
                    "type": "boolean"
                },
                "controller": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.Pod": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/model.ObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/model.PodSpec"
                },
                "status": {
                    "$ref": "#/definitions/model.PodStatus"
                }
            }
        },
        "model.PodCondition": {
            "type": "object",
            "properties": {
                "lastProbeTime": {
                    "type": "string"
                },
                "lastTransitionTime": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.PodSpec": {
            "type": "object",
            "properties": {
                "activeDeadlineSeconds": {
                    "type": "integer"
                },
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Container"
                    }
                },
                "initContainers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Container"
                    }
                },
                "terminationGracePeriodSeconds": {
                    "type": "integer"
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Toleration"
                    }
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Volume"
                    }
                }
            }
        },
        "model.PodStatus": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.PodCondition"
                    }
                },
                "hostIP": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "nominatedNodeName": {
                    "type": "string"
                },
                "phase": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "model.PodTemplateSpec": {
            "type": "object",
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/model.ObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/model.PodSpec"
                }
            }
        },
        "model.PodUpdate": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/model.SpecRequest"
                }
            }
        },
        "model.PodsCreateRequest": {
            "type": "object",
            "properties": {
                "opts": {
                    "$ref": "#/definitions/model.CreateOptions"
                },
                "pod": {
                    "$ref": "#/definitions/model.Pod"
                }
            }
        },
        "model.PodsUpdateRequest": {
            "type": "object",
            "properties": {
                "opts": {
                    "$ref": "#/definitions/model.UpdateOptions"
                },
                "pod": {
                    "$ref": "#/definitions/model.PodUpdate"
                }
            }
        },
        "model.SpecRequest": {
            "type": "object",
            "properties": {
                "activeDeadlineSeconds": {
                    "type": "integer"
                },
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ContainerRequest"
                    }
                },
                "initContainers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ContainerRequest"
                    }
                },
                "terminationGracePeriodSeconds": {
                    "type": "integer"
                },
                "tolerations": {
                    "description": "allow it to be set to 1 if it was previously negative",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Toleration"
                    }
                }
            }
        },
        "model.Toleration": {
            "type": "object",
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "tolerationSeconds": {
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "model.UpdateOptions": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "dryRun": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "fieldManager": {
                    "type": "string"
                },
                "fieldValidation": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                }
            }
        },
        "model.UserRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "role_id",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role_id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.Volume": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
