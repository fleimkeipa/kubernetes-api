definitions:
  controller.AuthResponse:
    properties:
      message:
        type: string
      token:
        type: string
      type:
        example: basic,oauth2
        type: string
      username:
        type: string
    type: object
  controller.FailureResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  controller.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  model.Container:
    properties:
      args:
        items:
          type: string
        type: array
      command:
        items:
          type: string
        type: array
      env:
        items:
          $ref: '#/definitions/model.EnvVar'
        type: array
      image:
        type: string
      name:
        type: string
      ports:
        items:
          $ref: '#/definitions/model.ContainerPort'
        type: array
      stdin:
        type: boolean
      stdinOnce:
        type: boolean
      terminationMessagePath:
        type: string
      tty:
        type: boolean
      workingDir:
        type: string
    type: object
  model.ContainerPort:
    properties:
      containerPort:
        type: integer
      hostIP:
        type: string
      hostPort:
        type: integer
      name:
        type: string
      protocol:
        type: string
    type: object
  model.ContainerRequest:
    properties:
      image:
        type: string
      name:
        description: cannot changable
        type: string
    type: object
  model.CreateOptions:
    properties:
      apiVersion:
        type: string
      dryRun:
        items:
          type: string
        type: array
      fieldManager:
        type: string
      fieldValidation:
        type: string
      kind:
        type: string
    type: object
  model.Deployment:
    properties:
      apiVersion:
        type: string
      kind:
        type: string
      metadata:
        allOf:
        - $ref: '#/definitions/model.ObjectMeta'
        description: |-
          Standard object's metadata.
          +optional
      spec:
        allOf:
        - $ref: '#/definitions/model.DeploymentSpec'
        description: |-
          Specification of the desired behavior of the Deployment.
          +optional
      status:
        allOf:
        - $ref: '#/definitions/model.DeploymentStatus'
        description: |-
          Most recently observed status of the Deployment.
          +optional
    type: object
  model.DeploymentCondition:
    properties:
      lastTransitionTime:
        description: Last time the condition transitioned from one status to another.
        type: string
      lastUpdateTime:
        description: The last time this condition was updated.
        type: string
      message:
        description: A human readable message indicating details about the transition.
        type: string
      reason:
        description: The reason for the condition's last transition.
        type: string
      status:
        description: Status of the condition, one of True, False, Unknown.
        type: string
      type:
        allOf:
        - $ref: '#/definitions/model.DeploymentConditionType'
        description: Type of deployment condition.
    type: object
  model.DeploymentConditionType:
    enum:
    - Available
    - Progressing
    - ReplicaFailure
    type: string
    x-enum-varnames:
    - DeploymentAvailable
    - DeploymentProgressing
    - DeploymentReplicaFailure
  model.DeploymentCreateRequest:
    properties:
      deployment:
        $ref: '#/definitions/model.Deployment'
      opts:
        $ref: '#/definitions/model.CreateOptions'
    type: object
  model.DeploymentSpec:
    properties:
      minReadySeconds:
        description: |-
          Minimum number of seconds for which a newly created pod should be ready
          without any of its container crashing, for it to be considered available.
          Defaults to 0 (pod will be considered available as soon as it is ready)
          +optional
        type: integer
      paused:
        description: |-
          Indicates that the deployment is paused.
          +optional
        type: boolean
      progressDeadlineSeconds:
        description: |-
          The maximum time in seconds for a deployment to make progress before it
          is considered to be failed. The deployment controller will continue to
          process failed deployments and a condition with a ProgressDeadlineExceeded
          reason will be surfaced in the deployment status. Note that progress will
          not be estimated during the time a deployment is paused. Defaults to 600s.
        type: integer
      replicas:
        description: |-
          Number of desired pods. This is a pointer to distinguish between explicit
          zero and not specified. Defaults to 1.
          +optional
        type: integer
      revisionHistoryLimit:
        description: |-
          The number of old ReplicaSets to retain to allow rollback.
          This is a pointer to distinguish between explicit zero and not specified.
          Defaults to 10.
          +optional
        type: integer
      selector:
        allOf:
        - $ref: '#/definitions/model.LabelSelector'
        description: |-
          Label selector for pods. Existing ReplicaSets whose pods are
          selected by this will be the ones affected by this deployment.
          It must match the pod template's labels.
      strategy:
        allOf:
        - $ref: '#/definitions/model.DeploymentStrategy'
        description: |-
          The deployment strategy to use to replace existing pods with new ones.
          +optional
          s
      template:
        allOf:
        - $ref: '#/definitions/model.PodTemplateSpec'
        description: |-
          Template describes the pods that will be created.
          The only allowed template.spec.restartPolicy value is "Always".
    type: object
  model.DeploymentStatus:
    properties:
      availableReplicas:
        description: |-
          Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
          +optional
        type: integer
      collisionCount:
        description: |-
          Count of hash collisions for the Deployment. The Deployment controller uses this
          field as a collision avoidance mechanism when it needs to create the name for the
          newest ReplicaSet.
          +optional
        type: integer
      conditions:
        description: Represents the latest available observations of a deployment's
          current state.
        items:
          $ref: '#/definitions/model.DeploymentCondition'
        type: array
      observedGeneration:
        description: |-
          The generation observed by the deployment controller.
          +optional
        type: integer
      readyReplicas:
        description: |-
          readyReplicas is the number of pods targeted by this Deployment with a Ready Condition.
          +optional
        type: integer
      replicas:
        description: |-
          Total number of non-terminated pods targeted by this deployment (their labels match the selector).
          +optional
        type: integer
      unavailableReplicas:
        description: |-
          Total number of unavailable pods targeted by this deployment. This is the total number of
          pods that are still required for the deployment to have 100% available capacity. They may
          either be pods that are running but not yet available or pods that still have not been created.
          +optional
        type: integer
      updatedReplicas:
        description: |-
          Total number of non-terminated pods targeted by this deployment that have the desired template spec.
          +optional
        type: integer
    type: object
  model.DeploymentStrategy:
    properties:
      type:
        allOf:
        - $ref: '#/definitions/model.DeploymentStrategyType'
        description: |-
          Rolling update config params. Present only if DeploymentStrategyType =
          RollingUpdate.
          ---
          TODO: Update this to follow our convention for oneOf, whatever we decide it
          to be.
          +optional
          RollingUpdate *RollingUpdateDeployment `json:"rollingUpdate,omitempty"`
          Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
          +optional
    type: object
  model.DeploymentStrategyType:
    enum:
    - Recreate
    - RollingUpdate
    type: string
    x-enum-varnames:
    - RecreateDeploymentStrategyType
    - RollingUpdateDeploymentStrategyType
  model.DeploymentUpdateRequest:
    properties:
      deployment:
        $ref: '#/definitions/model.Deployment'
      opts:
        $ref: '#/definitions/model.UpdateOptions'
    type: object
  model.EnvVar:
    properties:
      name:
        type: string
      value:
        type: string
    type: object
  model.FinalizerName:
    enum:
    - kubernetes
    type: string
    x-enum-varnames:
    - FinalizerKubernetes
  model.LabelSelector:
    properties:
      matchExpressions:
        description: |-
          matchExpressions is a list of label selector requirements. The requirements are ANDed.
          +optional
          +listType=atomic
        items:
          $ref: '#/definitions/model.LabelSelectorRequirement'
        type: array
      matchLabels:
        additionalProperties:
          type: string
        description: |-
          matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
          map is equivalent to an element of matchExpressions, whose key field is "key", the
          operator is "In", and the values array contains only "value". The requirements are ANDed.
          +optional
        type: object
    type: object
  model.LabelSelectorOperator:
    enum:
    - In
    - NotIn
    - Exists
    - DoesNotExist
    type: string
    x-enum-varnames:
    - LabelSelectorOpIn
    - LabelSelectorOpNotIn
    - LabelSelectorOpExists
    - LabelSelectorOpDoesNotExist
  model.LabelSelectorRequirement:
    properties:
      key:
        description: key is the label key that the selector applies to.
        type: string
      operator:
        allOf:
        - $ref: '#/definitions/model.LabelSelectorOperator'
        description: |-
          operator represents a key's relationship to a set of values.
          Valid operators are In, NotIn, Exists and DoesNotExist.
      values:
        description: |-
          values is an array of string values. If the operator is In or NotIn,
          the values array must be non-empty. If the operator is Exists or DoesNotExist,
          the values array must be empty. This array is replaced during a strategic
          merge patch.
          +optional
          +listType=atomic
        items:
          type: string
        type: array
    type: object
  model.Login:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  model.Namespace:
    properties:
      apiVersion:
        type: string
      kind:
        type: string
      metadata:
        $ref: '#/definitions/model.ObjectMeta'
      spec:
        allOf:
        - $ref: '#/definitions/model.NamespaceSpec'
        description: |-
          Spec defines the behavior of the Namespace.
          +optional
      status:
        allOf:
        - $ref: '#/definitions/model.NamespaceStatus'
        description: |-
          Status describes the current status of a Namespace.
          +optional
    type: object
  model.NamespaceCondition:
    properties:
      lastTransitionTime:
        description: +optional
        type: string
      message:
        description: +optional
        type: string
      reason:
        description: +optional
        type: string
      status:
        description: Status of the condition, one of True, False, Unknown.
        type: string
      type:
        allOf:
        - $ref: '#/definitions/model.NamespaceConditionType'
        description: Type of namespace controller condition.
    type: object
  model.NamespaceConditionType:
    enum:
    - NamespaceDeletionDiscoveryFailure
    - NamespaceDeletionContentFailure
    - NamespaceDeletionGroupVersionParsingFailure
    - NamespaceContentRemaining
    - NamespaceFinalizersRemaining
    type: string
    x-enum-varnames:
    - NamespaceDeletionDiscoveryFailure
    - NamespaceDeletionContentFailure
    - NamespaceDeletionGVParsingFailure
    - NamespaceContentRemaining
    - NamespaceFinalizersRemaining
  model.NamespaceCreateRequest:
    properties:
      namespace:
        $ref: '#/definitions/model.Namespace'
      opts:
        $ref: '#/definitions/model.CreateOptions'
    type: object
  model.NamespacePhase:
    enum:
    - Active
    - Terminating
    type: string
    x-enum-varnames:
    - NamespaceActive
    - NamespaceTerminating
  model.NamespaceSpec:
    properties:
      finalizers:
        description: |-
          Finalizers is an opaque list of values that must be empty to permanently remove object from storage.
          +optional
        items:
          $ref: '#/definitions/model.FinalizerName'
        type: array
    type: object
  model.NamespaceStatus:
    properties:
      conditions:
        description: Represents the latest available observations of a namespace's
          current state.
        items:
          $ref: '#/definitions/model.NamespaceCondition'
        type: array
      phase:
        allOf:
        - $ref: '#/definitions/model.NamespacePhase'
        description: |-
          Phase is the current lifecycle phase of the namespace.
          +optional
    type: object
  model.NamespaceUpdateRequest:
    properties:
      namespace:
        $ref: '#/definitions/model.Namespace'
      opts:
        $ref: '#/definitions/model.UpdateOptions'
    type: object
  model.ObjectMeta:
    properties:
      annotations:
        additionalProperties:
          type: string
        type: object
      creationTimestamp:
        type: string
      deletionGracePeriodSeconds:
        type: integer
      deletionTimestamp:
        type: string
      finalizers:
        items:
          type: string
        type: array
      generateName:
        type: string
      generation:
        type: integer
      labels:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      namespace:
        type: string
      ownerReferences:
        items:
          $ref: '#/definitions/model.OwnerReference'
        type: array
      resourceVersion:
        type: string
      uid:
        type: string
    type: object
  model.OwnerReference:
    properties:
      apiVersion:
        type: string
      blockOwnerDeletion:
        type: boolean
      controller:
        type: boolean
      kind:
        type: string
      name:
        type: string
    type: object
  model.Pod:
    properties:
      apiVersion:
        type: string
      kind:
        type: string
      metadata:
        $ref: '#/definitions/model.ObjectMeta'
      spec:
        $ref: '#/definitions/model.PodSpec'
      status:
        $ref: '#/definitions/model.PodStatus'
    type: object
  model.PodCondition:
    properties:
      lastProbeTime:
        type: string
      lastTransitionTime:
        type: string
      message:
        type: string
      reason:
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  model.PodSpec:
    properties:
      activeDeadlineSeconds:
        type: integer
      containers:
        items:
          $ref: '#/definitions/model.Container'
        type: array
      initContainers:
        items:
          $ref: '#/definitions/model.Container'
        type: array
      terminationGracePeriodSeconds:
        type: integer
      tolerations:
        items:
          $ref: '#/definitions/model.Toleration'
        type: array
      volumes:
        items:
          $ref: '#/definitions/model.Volume'
        type: array
    type: object
  model.PodStatus:
    properties:
      conditions:
        items:
          $ref: '#/definitions/model.PodCondition'
        type: array
      hostIP:
        type: string
      message:
        type: string
      nominatedNodeName:
        type: string
      phase:
        type: string
      reason:
        type: string
    type: object
  model.PodTemplateSpec:
    properties:
      metadata:
        $ref: '#/definitions/model.ObjectMeta'
      spec:
        $ref: '#/definitions/model.PodSpec'
    type: object
  model.PodUpdate:
    properties:
      spec:
        $ref: '#/definitions/model.SpecRequest'
    type: object
  model.PodsCreateRequest:
    properties:
      opts:
        $ref: '#/definitions/model.CreateOptions'
      pod:
        $ref: '#/definitions/model.Pod'
    type: object
  model.PodsUpdateRequest:
    properties:
      opts:
        $ref: '#/definitions/model.UpdateOptions'
      pod:
        $ref: '#/definitions/model.PodUpdate'
    type: object
  model.SpecRequest:
    properties:
      activeDeadlineSeconds:
        type: integer
      containers:
        items:
          $ref: '#/definitions/model.ContainerRequest'
        type: array
      initContainers:
        items:
          $ref: '#/definitions/model.ContainerRequest'
        type: array
      terminationGracePeriodSeconds:
        type: integer
      tolerations:
        description: allow it to be set to 1 if it was previously negative
        items:
          $ref: '#/definitions/model.Toleration'
        type: array
    type: object
  model.Toleration:
    properties:
      effect:
        type: string
      key:
        type: string
      operator:
        type: string
      tolerationSeconds:
        type: integer
      value:
        type: string
    type: object
  model.UpdateOptions:
    properties:
      apiVersion:
        type: string
      dryRun:
        items:
          type: string
        type: array
      fieldManager:
        type: string
      fieldValidation:
        type: string
      kind:
        type: string
    type: object
  model.UserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      role_id:
        type: integer
      username:
        type: string
    required:
    - email
    - password
    - role_id
    - username
    type: object
  model.Volume:
    properties:
      name:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/github_callback:
    get:
      description: This endpoint handles the callback from Github after a user authorizes
        the app. It exchanges the authorization code for an access token and retrieves
        the users profile information.
      parameters:
      - description: State for CSRF protection
        in: query
        name: state
        required: true
        type: string
      - description: Authorization code returned by Github
        in: query
        name: code
        required: true
        type: string
      responses:
        "200":
          description: User's Github profile data
          schema:
            $ref: '#/definitions/controller.AuthResponse'
        "400":
          description: Error message
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: Github OAuth2 callback
      tags:
      - oAuth
  /auth/github_login:
    get:
      description: This endpoint initiates the Github OAuth2 login process by redirecting
        the user to Githubs login page.
      responses:
        "303":
          description: Redirects to Github login page
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Error message
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: Redirect to Github login page
      tags:
      - oAuth
  /auth/google_callback:
    get:
      description: This endpoint handles the callback from Google after a user authorizes
        the app. It exchanges the authorization code for an access token and retrieves
        the users profile information.
      parameters:
      - description: State for CSRF protection
        in: query
        name: state
        required: true
        type: string
      - description: Authorization code returned by Google
        in: query
        name: code
        required: true
        type: string
      responses:
        "200":
          description: User's Google profile data
          schema:
            $ref: '#/definitions/controller.AuthResponse'
        "400":
          description: Error message
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: Google OAuth2 callback
      tags:
      - oAuth
  /auth/google_login:
    get:
      description: This endpoint initiates the Google OAuth2 login process by redirecting
        the user to Googles login page.
      responses:
        "303":
          description: Redirects to Google login page
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Error message
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: Redirect to Google login page
      tags:
      - oAuth
  /auth/login:
    post:
      consumes:
      - application/json
      description: This endpoint allows a user to log in by providing a valid username
        and password.
      parameters:
      - description: User login input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.Login'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in with JWT token
          schema:
            $ref: '#/definitions/controller.AuthResponse'
        "400":
          description: Error message including details on failure
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: User login
      tags:
      - auth
  /deployments:
    get:
      consumes:
      - application/json
      description: Retrieves a list of deployments from the Kubernetes cluster, optionally
        filtered by namespace.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Maximum number of deployments to retrieve
        in: query
        name: limit
        type: string
      - description: Pagination token for fetching more deployments
        in: query
        name: continue
        type: string
      - description: Namespace to filter deployments by
        in: query
        name: namespace
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of deployments
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: List deployments
      tags:
      - deployments
    post:
      consumes:
      - application/json
      description: Creates a new deployment in the Kubernetes cluster.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Deployment request body
        in: body
        name: deployment
        required: true
        schema:
          $ref: '#/definitions/model.DeploymentCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Suxccessfully created deployment
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request or error message
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: Create a new deployment
      tags:
      - deployments
    put:
      consumes:
      - application/json
      description: Updates an existing deployment in the Kubernetes cluster.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Deployment request body
        in: body
        name: deployment
        required: true
        schema:
          $ref: '#/definitions/model.DeploymentUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the deployment
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Bad request or invalid data
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: Update an existing deployment
      tags:
      - deployments
  /deployments/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a deployment from the Kubernetes cluster by its name or
        UID, optionally filtered by namespace.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Namespace to filter the deployment by
        in: query
        name: namespace
        type: string
      - description: Name or UID of the deployment
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            type: string
        "500":
          description: Bad request or error message
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: Delete a deployment by name or UID
      tags:
      - deployments
    get:
      consumes:
      - application/json
      description: Retrieves a deployment from the Kubernetes cluster by its name
        or UID, optionally filtered by namespace.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Namespace to filter the deployment by
        in: query
        name: namespace
        type: string
      - description: Name or UID of the deployment
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Details of the requested deployment
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: Get a deployment by name or UID
      tags:
      - deployments
  /events:
    get:
      consumes:
      - application/json
      description: Retrieves a list of events from the database.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: kind to filter events by
        in: query
        name: kind
        type: string
      - description: event kind to filter events by
        in: query
        name: event_kind
        type: string
      - description: creation time to filter events by
        in: query
        name: creation_time
        type: string
      - description: owner id to filter events by
        in: query
        name: owner_id
        type: string
      - description: owner username to filter events by
        in: query
        name: owner_username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of events
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: List events
      tags:
      - events
  /events/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a event from Database by its ID, optionally filtered
        by namespace.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the event
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Details of the requested event
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: Get a event by ID
      tags:
      - events
  /namespaces:
    get:
      consumes:
      - application/json
      description: Retrieves a list of namespaces from the Kubernetes cluster.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Maximum number of namespaces to retrieve
        in: query
        name: limit
        type: string
      - description: Pagination token for fetching more namespaces
        in: query
        name: continue
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of namespaces
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "500":
          description: Bad request or error message
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: List namespaces
      tags:
      - namespaces
    post:
      consumes:
      - application/json
      description: Creates a new namespace in the Kubernetes cluster.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Namespace request body
        in: body
        name: namespace
        required: true
        schema:
          $ref: '#/definitions/model.NamespaceCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created namespace
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Bad request or error message
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: Create a new namespace
      tags:
      - namespaces
    put:
      consumes:
      - application/json
      description: Updates an existing namespace in the Kubernetes cluster.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Namespace request body
        in: body
        name: namespace
        required: true
        schema:
          $ref: '#/definitions/model.NamespaceUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the namespace
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Bad request or invalid data
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: Update an existing namespace
      tags:
      - namespaces
  /namespaces/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a namespace from the Kubernetes cluster by its name or
        UID.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Name or UID of the namespace
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            type: string
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: Delete a namespace by name or UID
      tags:
      - namespaces
    get:
      consumes:
      - application/json
      description: Retrieves a namespace from the Kubernetes cluster by its name or
        UID.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Name or UID of the namespace
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Details of the requested namespace
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: Get a namespace by name or UID
      tags:
      - namespaces
  /pods:
    get:
      consumes:
      - application/json
      description: Retrieves a list of pods from the Kubernetes cluster. You can filter
        results by namespace or paginate the response using the limit and continue
        parameters.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Maximum number of pods to retrieve
        in: query
        name: limit
        type: string
      - description: Pagination token for fetching more pods
        in: query
        name: continue
        type: string
      - description: Namespace to filter pods by
        in: query
        name: namespace
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of pods
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: List pods
      tags:
      - pods
    post:
      consumes:
      - application/json
      description: Creates a new pod in the Kubernetes cluster.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Pod request body
        in: body
        name: pod
        required: true
        schema:
          $ref: '#/definitions/model.PodsCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created the pod
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Bad request or invalid data
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: Create a new pod
      tags:
      - pods
  /pods/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a pod from the Kubernetes cluster by its name or UID, optionally
        filtered by namespace.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Namespace to filter the pod by
        in: query
        name: namespace
        type: string
      - description: Name or UID of the pod
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            type: string
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: Delete a pod by name or UID
      tags:
      - pods
    get:
      consumes:
      - application/json
      description: Retrieves a pod from the Kubernetes cluster by its name or UID,
        optionally filtered by namespace.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Namespace to filter the pod by
        in: query
        name: namespace
        type: string
      - description: Name or UID of the pod
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Details of the requested pod
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: Get a pod by name or UID
      tags:
      - pods
    put:
      consumes:
      - application/json
      description: |-
        Update specific fields of an existing pod in the Kubernetes cluster. The following fields are changeable:
        - containers.image
        - initContainers.image
        - tolerations (only additions)
        - activeDeadlineSeconds
        - terminationGracePeriodSeconds
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Pod update request body
        in: body
        name: pod
        required: true
        schema:
          $ref: '#/definitions/model.PodsUpdateRequest'
      - description: Namespace to filter the pod by
        in: query
        name: namespace
        type: string
      - description: Name or UID of the pod
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Pod successfully updated
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Bad request or invalid input data
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: Update an existing pod
      tags:
      - pods
  /users:
    get:
      consumes:
      - application/json
      description: Retrieves a filtered and paginated list of users from the database
        based on query parameters.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Limit the number of users returned
        in: query
        name: limit
        type: string
      - description: Number of users to skip for pagination
        in: query
        name: skip
        type: string
      - description: Filter users by username
        in: query
        name: username
        type: string
      - description: Filter users by email
        in: query
        name: email
        type: string
      - description: Filter users by role ID
        in: query
        name: role_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response containing the list of users
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: List all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: This endpoint creates a new user by providing username, email,
        password, and role ID.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User creation input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: user username
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Error message including details on failure
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: CreateUser creates a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: This endpoint deletes a user by providing user id.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: user username
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: DeleteUser deletes an existing user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Fetches a user by their unique ID from the database.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response containing the user information
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: Retrieve user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: This endpoint updates a user by providing username, email, password,
        and role ID.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User update input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: user username
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Error message including details on failure
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: UpdateUser updates an existing user
      tags:
      - users
swagger: "2.0"
